class GameFiled 
{
    field int score, gridSize; // счетчик, размер сетки
	field Array tiels; // двумерный массив

	constructor GameFiled new(int count, int size) {
		var int i, j;
		var Array tempArr;
		let score = count;
		let gridSize = size;

		//инициализируется двумерный массив соответствующий игровому полю
		let tiels = Array.new(size);
		let i = 0;
		let j = 0;
		while (i < size){
			let tiels[i] = Array.new(size);
			while (j < size){
				let tempArr = tiels[i];
				let tempArr[j] = 0;
				let j = j + 1;
			}
			let j = 0;
			let i = i + 1;
		}
		
		// рисуется игрове поле
		do GameFiled.draw(size);
		
		// выводится счет
		do Output.moveCursor(1, 1);
		do Output.printString("Score:");
		do Output.printInt(score);

		return this;
	}

	method int getSize() {
        return gridSize; // Доступ к полю вне класса
    }

	method void dispose() {
		do Memory.deAlloc(this);
		return;
	}

	/*Рисует игровую сетку */
	function void draw(int gridSiz) {
		var int tileSize;
		var int i;
		var int j;

		let tileSize = 240 / gridSiz; // Размер плитки в зависимости от количества плиток


		// Вертикальные линии
		let i = 0;
		while (i < (gridSiz + 1)) {
			do Screen.drawLine(136 + (i * tileSize), 8, 136 + (i * tileSize), 248); 
			let i = i + 1;
		}

		// Горизонтальные линии
		let j = 0;
		while (j < (gridSiz + 1)) {
			do Screen.drawLine(136, 8 + (j * tileSize), 376, 8 + (j * tileSize)); 
			let j = j + 1;
		}

		//врменные строки для проверки вывода ячеек
		do DrawerNum.drawTwoTri((136+5), (8+5));
		do DrawerNum.drawTwoTri((136 + 5), (8 + tileSize +5));
		return;
	}

}