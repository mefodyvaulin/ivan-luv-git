class GameFilled 
{
	static int x1; //координаты начала поля 
	static int y1;
	static int x2;//конца
	static int y2;
	static String scoreString;
	field int score;
	field Array isFusionCells;
	field Array cells; // двумерный массив
	field int gridSize; // размер сетки
	field boolean isWin;

	constructor GameFilled new(int size) 
	{
		let score = 0;
		let gridSize = size;
		let isWin = false;
		let scoreString = "Score:";
		let x1 = 136;
		let y1 = 8;
		let x2 = (136 + 240);
		let y2 = (8 + 240);

		//инициализируется двумерный массив int-ов соответствующий игровому полю
		let cells = InitializationArrayOfArray(0);

		//инициализируется двумерный массив bool-ов соответствующий игровому полю
		let isFusionCells = InitializationArrayOfArray(1);

		// рисуется игрове поле
		do Screen.setColor(true);
		do draw();

		return this;
	}

	method void dispose() 
	{
		var int i;
		var Array tempArr;

		let i = 0;
		while (i < gridSize)
		{
			let tempArr = cells[i];
			do tempArr.dispose();
			let i = i + 1;
		}
		do cells.dispose();
		do scoreString.dispose();
		do Memory.deAlloc(this);
		return;
	}

	method int getWin() 
	{
        return isWin;
	}

	method int getSize()
	{
        return gridSize;
    }

	method int getScore() 
	{
        return score;
	}

	method void setScore(int bonus)
	{
		let score = score + bonus;
		do Output.moveCursor(1, 1);
		do Output.printString(scoreString);
		do Output.printInt(score);
		return;
	}

	/*Рисует игровую сетку */
	method void draw() 
	{
		var int tileSize, i, j;
		var Array tempArr;

		let tileSize = 240 / gridSize; // Размер плитки в зависимости от количества плиток

		// Вертикальные линии
		let i = 0;
		while (i < (gridSize + 1)) 
		{
			do Screen.drawLine(x1 + (i * tileSize), y1, x1 + (i * tileSize), y2); 
			let i = i + 1;
		}

		// Горизонтальные линии
		let j = 0;
		while (j < (gridSize + 1)) 
		{
			do Screen.drawLine(x1, y1 + (j * tileSize), x2, y1 + (j * tileSize)); 
			let j = j + 1;
		}

		//начальные ячейки
		let tempArr = cells[0];

		do DrawerNum.drawNum(4, (x1 + 5), (y1 + 5), gridSize);
		let tempArr[0] = 4;
		do setScore(4);

		do DrawerNum.drawNum(2, (x1 + 5)+ tileSize, (y1 + 5), gridSize);
		let tempArr[1] = 2;
		do setScore(2);

		return;
	}
	
	method Array InitializationArrayOfArray(int defult)
	{
		var int i, j;
		var Array tempArr, array;
		
		let array = Array.new(gridSize);
		let i = 0;
		let j = 0;
		while (i < gridSize)
		{
			let array[i] = Array.new(gridSize);
			let tempArr = array[i];
			while (j < gridSize)
			{
				let tempArr[j] = defult;
				let j = j + 1;
			}
			let j = 0;
			let i = i + 1;
		}

		return array;
	}

	method Array FillArrayOfArray(Array array, boolean defult)
	{
		var int i, j;
		var Array tempArr;

		let i = 0;
		let j = 0;
		while (i < gridSize)
		{
			let tempArr = array[i];
			while (j < gridSize)
			{
				let tempArr[j] = defult;
				let j = j + 1;
			}
			let j = 0;
			let i = i + 1;
		}

		return array;
	}

	method void moveRight()
	{
		var Array tempArr, boolArrh;
		var int i, j, p;
		var boolean addNewTile;
		
		let addNewTile = false;

		// массив для проверки того, было ли слияние в ячейке
		do FillArrayOfArray(isFusionCells, true);

		let p = gridSize - 1;
		while(p > 0)
		{
			let i = 0;
			let j = gridSize - 1;

			while (i < gridSize)
			{
				let tempArr = cells[i]; 
				let boolArrh = isFusionCells[i];
				while (j > 0)
				{
					if (tempArr[j] = tempArr[j-1] & (~(tempArr[j] = 0)) & boolArrh[j] & boolArrh[j-1])
					{
						do Screen.setColor(false);
						do DrawerNum.drawNum(tempArr[j], x1 + (((x2 - x1) / gridSize) * j) + 5, y1 + (((x2 - x1) / gridSize) * i) + 5, gridSize);
						do DrawerNum.drawNum(tempArr[j-1], x1 + (((x2 - x1) / gridSize) * (j-1)) + 5, y1 + (((x2 - x1) / gridSize) * i) + 5, gridSize);
						let tempArr[j] = tempArr[j] + tempArr[j-1];
						if (tempArr[j] = 2048)
						{
							let isWin = true;
						}
						let addNewTile = true; // надо добавить новую ячейку
						let boolArrh[j] = false;// больше не надо делать слияния с этой ячейкой
						let tempArr[j-1] = 0;
						do Screen.setColor(true);
						do DrawerNum.drawNum(tempArr[j], x1 + (((x2 - x1) / gridSize) * j) + 5, y1 + (((x2 - x1) / gridSize) * i) + 5, gridSize);
					}

					if (tempArr[j] = 0 & (~(tempArr[j-1] = 0)))
					{
						do Screen.setColor(false);
						do DrawerNum.drawNum(tempArr[j-1], x1 + (((x2 - x1) / gridSize) * (j-1)) + 5, y1 + (((x2 - x1) / gridSize) * i) + 5, gridSize);
						let tempArr[j] = tempArr[j-1];
						let addNewTile = true; // надо добавить новую ячейку
						let tempArr[j-1] = 0;
						do Screen.setColor(true);
						do DrawerNum.drawNum(tempArr[j], x1 + (((x2 - x1) / gridSize) * j) + 5, y1 + (((x2 - x1) / gridSize) * i) + 5, gridSize);
					}

					let j = j - 1;
				}
				let j = gridSize - 1;
				let i = i + 1;
			}
			let p = p - 1;
		}
		
		if (addNewTile)
		{
			do addRandomTile();
		}
		
		return;
	}

	method void moveLeft()
	{
		var Array tempArr, boolArrh;
		var int i, j, p;
		var boolean addNewTile;

		do FillArrayOfArray(isFusionCells, true);

		let p = gridSize - 1;
		while(p > 0)
		{
			let i = 0;
			let j = 0;
			while (i < gridSize)
			{
				let tempArr = cells[i]; 
				let boolArrh = isFusionCells[i];
				while (j < (gridSize - 1))
				{
					if (tempArr[j] = tempArr[j+1] & (~(tempArr[j] = 0)) & boolArrh[j] & boolArrh[j+1])
					{
						
						do Screen.setColor(false);
						do DrawerNum.drawNum(tempArr[j], x1 + (((x2 - x1) / gridSize) * j) + 5, y1 + (((x2 - x1) / gridSize) * i) + 5, gridSize);
						do DrawerNum.drawNum(tempArr[j+1], x1 + (((x2 - x1) / gridSize) * (j+1)) + 5, y1 + (((x2 - x1) / gridSize) * i) + 5, gridSize);
						let tempArr[j] = tempArr[j] + tempArr[j+1];
						if (tempArr[j] = 2048){
							let isWin = true;
						}
						let tempArr[j+1] = 0;
						let addNewTile = true; // надо добавить новую ячейку
						let boolArrh[j] = false;// больше не надо делать слияния с этой ячейкой
						do Screen.setColor(true);
						do DrawerNum.drawNum(tempArr[j], x1 + (((x2 - x1) / gridSize) * j) + 5, y1 + (((x2 - x1) / gridSize) * i) + 5, gridSize);
					}

					if (tempArr[j] = 0 & (~(tempArr[j+1] = 0)))
					{
						do Screen.setColor(false);
						do DrawerNum.drawNum(tempArr[j+1], x1 + (((x2 - x1) / gridSize) * (j+1)) + 5, y1 + (((x2 - x1) / gridSize) * i) + 5, gridSize);
						let tempArr[j] = tempArr[j+1];
						let tempArr[j+1] = 0;
						let addNewTile = true; // надо добавить новую ячейку
						do Screen.setColor(true);
						do DrawerNum.drawNum(tempArr[j],x1 + (((x2 - x1) / gridSize) * j) + 5, y1 + (((x2 - x1) / gridSize) * i) + 5, gridSize);
					}

					let j = j + 1;
				}
				let j = 0;
				let i = i + 1;
			}
			let p = p - 1;
		}
		
		if (addNewTile)
		{
			do addRandomTile();
		}

		return;
	}

	method void moveUp(){
		var Array tempArr, tempArr1, boolArrh, boolArrh1;
		var int i, j, p;
		var boolean addNewTile;

		do FillArrayOfArray(isFusionCells, true);
		let p = gridSize - 1;

		
		while(p > 0)
		{
			let i = 0;
			let j = 0;
			while (j < gridSize )
			{
				while (i < (gridSize - 1))
				{
					let tempArr = cells[i];
					let tempArr1 = cells[i+1];
					let boolArrh = isFusionCells[i];
					let boolArrh1 = isFusionCells[i+1];
					if (tempArr[j] = tempArr1[j] & (~(tempArr[j] = 0)) & boolArrh[j] & boolArrh1[j])
					{
						do Screen.setColor(false);
						do DrawerNum.drawNum(tempArr[j], x1 + (((x2 - x1) / gridSize) * j) + 5, y1 + (((x2 - x1) / gridSize) * i) + 5, gridSize);
						do DrawerNum.drawNum(tempArr1[j], x1 + (((x2 - x1) / gridSize) * j) + 5, y1 + (((x2 - x1) / gridSize) * (i+1)) + 5, gridSize);
						let tempArr[j] = tempArr1[j] + tempArr[j];
						let tempArr1[j] = 0;
						if (tempArr[j] = 2048){
							let isWin = true;
						}
						let addNewTile = true; // надо добавить новую ячейку
						let boolArrh[j] = false; // больше не надо делать слияния с этой ячейкой
						do Screen.setColor(true);
						do DrawerNum.drawNum(tempArr[j], x1 + (((x2 - x1) / gridSize) * j) + 5, y1 + (((x2 - x1) / gridSize) * i) + 5, gridSize);
					}

					if (tempArr[j] = 0 & (~(tempArr1[j] = 0)))
					{
						do Screen.setColor(false);
						do DrawerNum.drawNum(tempArr1[j], x1 + (((x2 - x1) / gridSize) * j) + 5, y1 + (((x2 - x1) / gridSize) * (i+1)) + 5, gridSize);
						let tempArr[j] = tempArr1[j];
						let tempArr1[j] = 0;
						let addNewTile = true; // надо добавить новую ячейку
						do Screen.setColor(true);
						do DrawerNum.drawNum(tempArr[j], x1 + (((x2 - x1) / gridSize) * j) + 5, y1 + (((x2 - x1) / gridSize) * i) + 5, gridSize);
					}

					let i = i + 1;
				}
				let i = 0;
				let j = j + 1;
			}
			let p = p - 1;
		}
		
		
		if (addNewTile){
			do addRandomTile();
		}

		return;
	}

	method void moveDown()
	{
		var Array tempArr, tempArr1, boolArrh, boolArrh1;
		var int i, j, p;
		var boolean addNewTile;

		while (i < gridSize)
		{
			let boolArrh = isFusionCells[i];
			while (j < gridSize)
			{
				let boolArrh[j] = true;
				let j = j + 1;
			}
			let j = 0;
			let i = i + 1;
		}

		let p = gridSize - 1;

		while(p > 0)
		{
			let i = gridSize - 1;
			let j = 0;
			while (j < gridSize)
			{
				while (i > 0)
				{
					let tempArr = cells[i];
					let tempArr1 = cells[i-1];
					let boolArrh = isFusionCells[i];
					let boolArrh1 = isFusionCells[i-1];

					if (tempArr[j] = tempArr1[j] & (~(tempArr[j] = 0)) & boolArrh[j] & boolArrh1[j])
					{
						do Screen.setColor(false);
						do DrawerNum.drawNum(tempArr[j], x1 + (((x2 - x1) / gridSize) * j) + 5, y1 + (((x2 - x1) / gridSize) * i) + 5, gridSize);
						do DrawerNum.drawNum(tempArr1[j], x1 + (((x2 - x1) / gridSize) * j) + 5, y1 + (((x2 - x1) / gridSize) * (i-1)) + 5, gridSize);
						let tempArr[j] = tempArr1[j] + tempArr[j];
						if (tempArr[j] = 2048){
							let isWin = true;
						}
						let tempArr1[j] = 0;
						let addNewTile = true; // надо добавить новую ячейку
						let boolArrh[j] = false;// больше не надо делать слияния с этой ячейкой
						do Screen.setColor(true);
						do DrawerNum.drawNum(tempArr[j], x1 + (((x2 - x1) / gridSize) * j) + 5, y1 + (((x2 - x1) / gridSize) * i) + 5, gridSize);
					}

					if (tempArr[j] = 0 & (~(tempArr1[j] = 0)))
					{
						do Screen.setColor(false);
						do DrawerNum.drawNum(tempArr1[j], x1 + (((x2 - x1) / gridSize) * j) + 5, y1 + (((x2 - x1) / gridSize) * (i-1)) + 5, gridSize);
						let tempArr[j] = tempArr1[j];
						let tempArr1[j] = 0;
						let addNewTile = true; // надо добавить новую ячейку
						do Screen.setColor(true);
						do DrawerNum.drawNum(tempArr[j], x1 + (((x2 - x1) / gridSize) * j) + 5, y1 + (((x2 - x1) / gridSize) * i) + 5, gridSize);
					}
					let i = i - 1;
				}
				let i = gridSize - 1;
				let j = j + 1;
			}
			let p = p - 1;
		}

		if (addNewTile)
		{
			do addRandomTile();
		}

		return;
	}

	method void addRandomTile() 
	{
        var int i, j, index, value, emptyCount;
        var Array emptyCells;
        var Array tempArr;

        // Подсчет пустых ячеек
		let emptyCells = Array.new(50);
        let i = 0;
		let index = 0;

        while (i < gridSize) {
            let tempArr = cells[i];
            let j = 0;
            while (j < gridSize) {
                if (tempArr[j] = 0) {
					let emptyCount = emptyCount + 1;
                    let emptyCells[index] = i;
					let emptyCells[index+1] = j;
					let index = index + 2;
                }
                let j = j + 1;
            }
            let i = i + 1;
        }

        // Выбираем случайную пустую ячейку
        let index = Random.randomEven(index, score);
        let i = emptyCells[index];
        let j = emptyCells[index + 1];
		
		// Выбираем случайное число 2 или 4
		let value = Random.randomTwoOrFour(emptyCount, score);
        let tempArr = cells[i];
        let tempArr[j] = value;
		do setScore(value);

        // Отрисовываем новую плитку
        do DrawerNum.drawNum(value, x1 + (((x2 - x1) / gridSize) * j) + 5, y1 + (((x2 - x1) / gridSize) * i) + 5, gridSize);

		do emptyCells.dispose();
		return;
    }

	method boolean isGameOver() 
	{
		var int i, j;
		var Array tempArr, tempArr1;

		// Проверяем, есть ли пустые клетки
		let i = 0;
        let j = 0;        
		while (i < (gridSize-1))
        {            
			let tempArr = cells[i];
            let tempArr1 = cells[i+1];            
			while (j < (gridSize-1))
            {                
				if ((tempArr[j] = 0) | (tempArr[j] = tempArr1[j]) | (tempArr[j] = tempArr[j+1]))
				{
                    return false;                
				}
                let j = j + 1;            
			}
            if ((tempArr[j] = tempArr1[j]) | (tempArr[j] = 0))
			{                
				return false;
            }            
			let i = i + 1;
            let j = 0;        
		}
        let tempArr = cells[i];        
		while (j < (gridSize - 1))
		{
            if ((tempArr[j] = 0) | (tempArr[j] = tempArr[j+1]))
			{                
				return false;
            }            
			let j = j + 1;
        }        
		if (tempArr[j] = 0)
		{
            return false;        
		}

		// Если не осталось пустых клеток и плитки не могут быть объединены
		return true;  // Игра закончена
	}

}
